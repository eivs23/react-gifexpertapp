{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","class","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","className","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAoB9C,OACI,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MASd,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAtBU,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCNfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0DAE6CC,UAAWH,GAFxD,sDAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAErC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,MAAM,yCAAX,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,kCAAMA,EAAN,WCFCS,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAsBxC,OAbAC,qBAAW,WACP1B,EAASC,GACR0B,MAAM,SAAAC,GAECH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAACtB,IAGGuB,EDjBwBK,CAAc5B,GAAjCa,EAJ2B,EAIhCN,KAAae,EAJmB,EAInBA,QAWpB,OACI,eAAC,WAAD,WACA,oBAAKO,UAAU,oCAAf,SAAqD7B,IAEpDsB,GAAW,mBAAGO,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGQhB,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aE3BpBmB,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,cAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAqB9B,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAII,6BAEQ8C,EAAWtB,KAAM,SAAAT,GAAQ,OACzB,cAAC,EAAD,CAEAA,SAAYA,GADJA,Y,MC9BhCgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0870ac7b.chunk.js","sourcesContent":["import React, { useState, } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\nconst [inputValue, setInputValue] = useState('');\nconst handleInputChange = (e) => {\n    //console.log(e.target.value);\n    setInputValue( e.target.value );\n}\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    if ( inputValue.trim().length > 2 ) {\n        setCategories( cats => [ inputValue, ...cats ] );\n        setInputValue('');\n\n\n    }\n\n    //console.log('Submit echo');\n}\n\n    return (\n        <form onSubmit={ handleSubmit } >\n            <input \n                type=\"text\"\n                value = {inputValue}\n                onChange={ handleInputChange}\n            />\n        </form>\n        \n    )\n}\n\n\nAddCategory.propTypes = {\n\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async( category )  => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI( category )}&api_key=Tf4jnEL8l4IiiVeN3fZUg88S063vJVD8`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    } )\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url } ) => {\n    console.log(id, title, url );\n    return (\n        <div class=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }/> \n            <p> { title } </p>\n        </div>\n    )\n}\n","import React, {  Fragment } from 'react'\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n\n    //Custom hook\n    const {data:images, loading} = useFetchGifs( category );\n\n\n    //Hook\n    /*\n    const [images, setImages] = useState([]);\n\n    */\n\n    //getGifs();\n\n    return (\n        <Fragment>\n        <h3  className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n        {loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\n\n        <div className=\"card-grid\">\n           \n            {\n                images.map( img  => (\n                    <GifGridItem \n                        key={img.id} \n                        { ...img }\n                    />\n                ) )\n            }\n            \n        </div>\n        </Fragment>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\n//Custom hook\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    //De esta forma solo se ejecuta el componente una vez cuando es renderizado\n    //por primera vez.\n    useEffect( () => {\n        getGifs( category )\n        .then( imgs => { \n            \n                setState({\n                    data: imgs,\n                    loading: false\n                }) \n    }\n     );\n    }, [category])\n\n\n    return state; //{ data: [], loading: true };\n    }","import React, { Fragment, useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    /*\n    const handleAdd = () => {\n        //Utilizamos el operado expred [...categories, 'HunterXHunter'] para extraer las\n        //categorias anteriores y agregar una nueva.\n\n        //setCategories( [...categories, 'HunterXHunter'] );\n\n        //Agregamos la categorÃ­a HunterXHunter al principio del arreglo.\n\n        //setCategories( ['HunterXHunter', ...categories] );\n\n        //Recibimos como callbacks las categorias en cats\n        setCategories( cats => [ ...cats, 'HunterXHunter' ] );\n    }\n    */\n\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n\n            {\n                <ol>\n                    { \n                        categories.map(  category => (\n                        <GifGrid \n                        key = { category }\n                        category= { category } />\n                             \n                        ))\n                    }\n                </ol>\n            }\n        </Fragment>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}